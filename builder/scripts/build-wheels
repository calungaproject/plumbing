#!/bin/bash
set -euo pipefail

# Initialize variables
WHEEL_SERVER_URL=""
PACKAGES=()
BUILD_SEQUENCE_SUMMARIES=()

# Help function
show_help() {
    cat << EOF
Build Python wheels for one or more packages and their dependencies.

This script uses fromager to resolve dependencies, create a build order, and build
wheels for the specified packages and all their dependencies. It sets up the build
environment, handles CA trust configuration, and outputs both source distributions
and wheels. When building multiple packages, shared dependencies are built only once.

USAGE:
    $0 [OPTIONS] <PACKAGE> [<PACKAGE>...]

ARGUMENTS:
    PACKAGE                 One or more packages to build wheels for (required)

OPTIONS:
    --cache-wheel-server-url URL    Optional wheel cache server URL for faster builds
    --help                          Show this help message

EXAMPLES:
    $0 urllib3==2.4.0
    $0 urllib3==2.4.0 requests==2.31.0
    $0 --cache-wheel-server-url https://wheels.example.com urllib3==2.4.0 requests==2.31.0

ENVIRONMENT:
    DEBUG=1                        Enable debug mode with verbose output

OUTPUT:
    The script creates wheels and source distributions in the output directory
    and displays the locations of built artifacts.
EOF
    exit 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            show_help
            ;;
        --cache-wheel-server-url)
            if [[ $# -lt 2 ]]; then
                echo "Error: --cache-wheel-server-url requires a value" >&2
                exit 1
            fi
            WHEEL_SERVER_URL="$2"
            shift 2
            ;;
        -*)
            echo "Error: Unknown option $1" >&2
            echo "Use --help for usage information" >&2
            exit 1
            ;;
        *)
            PACKAGES+=("$1")
            shift
            ;;
    esac
done

# Check if required positional argument is provided
if [[ ${#PACKAGES[@]} -eq 0 ]]; then
    echo "Error: At least one package argument is required" >&2
    echo "Use --help for usage information" >&2
    exit 1
fi

if [ "${DEBUG:-}" = "1" ]; then
    set -x
fi

# Logging function with timestamp
log() {
    echo "[$(date --utc -Ins)] $1" >&2
}

log "Setting up CA trust"
ca_bundle=/mnt/trusted-ca/ca-bundle.crt
if [ -f "$ca_bundle" ]; then
    echo "INFO: Using mounted CA bundle: $ca_bundle"
    cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
    update-ca-trust
fi

log "Preparing build environment"
rm -rf output
mkdir output
cd output

# Function to save build sequence summary
save_build_sequence_summary() {
    local package="$1"
    local summary_file="work-dir/build-sequence-summary.json"
    
    if [ -f "$summary_file" ]; then
        # Create a package-specific filename
        local safe_package_name=$(echo "$package" | sed 's/[^a-zA-Z0-9._-]/_/g')
        local saved_summary="build-sequence-summary-${safe_package_name}.json"
        log "Saving build sequence summary for $package to $saved_summary"
        cp "$summary_file" "$saved_summary"
        BUILD_SEQUENCE_SUMMARIES+=("$saved_summary")
    fi
}

# Process each package
for PACKAGE in "${PACKAGES[@]}"; do
    log "Processing package: ${PACKAGE}"

    log "Resolving dependencies and creating build order"
    # Create bootstrap to resolve dependencies
    fromager_args=(
        bootstrap
        "${PACKAGE}"
    )

    # Add wheel server URL if provided
    if [ -n "$WHEEL_SERVER_URL" ]; then
        fromager_args+=(--cache-wheel-server-url "$WHEEL_SERVER_URL")
    fi

    echo "Running: fromager ${fromager_args[*]}"
    fromager "${fromager_args[@]}"

    log "Building wheels from build order"

    # Build wheels using the generated build order
    fromager_build_args=(
        build-sequence
        work-dir/build-order.json
    )

    if [ -n "$WHEEL_SERVER_URL" ]; then
        fromager_build_args+=(--cache-wheel-server-url "$WHEEL_SERVER_URL")
    fi

    echo "Running: fromager ${fromager_build_args[*]}"
    fromager "${fromager_build_args[@]}"

    # Save build sequence summary before clearing work-dir
    save_build_sequence_summary "$PACKAGE"

    # Clear work-dir for next package (but preserve sdists-repo and wheels-repo)
    if [ "${#PACKAGES[@]}" -gt 1 ] && [ "$PACKAGE" != "${PACKAGES[-1]}" ]; then
        log "Clearing work-dir for next package (preserving sdists-repo and wheels-repo)"
        rm -rf work-dir
    fi
done

log "Build completed successfully"

echo 'Source Distributions:'
find "$(pwd)/sdists-repo/builds" -type f 2>/dev/null || echo "No source distributions found"

echo 'Wheels:'
find "$(pwd)/wheels-repo/downloads" -type f 2>/dev/null || echo "No wheels found"

# Show build sequence summaries if any were saved
if [ ${#BUILD_SEQUENCE_SUMMARIES[@]} -gt 0 ]; then
    echo 'Build Sequence Summaries:'
    for summary in "${BUILD_SEQUENCE_SUMMARIES[@]}"; do
        echo "$(pwd)/$summary"
    done
fi

log "End build-wheels"
